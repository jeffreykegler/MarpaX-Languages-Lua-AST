# For more parser tests: http://lua-users.org/wiki/LuaGrammar

# keep NAIF separator
    varlist ::= var+ separator => [,]

# moving to external lexing 
	no quoted literals (everything must have a name)
	# handle long nestable strings/comments
		# PEG for nested comments
			Begin < '(*'
			End   < '*)'
			C     < Begin N* End
			N     < C / (!Begin !End Z)
			Z     < any single character

# lua formatter/ast emitter

http://lua-users.org/wiki/LuaInspect

https://github.com/batrick/lunadry # most recent

http://codepad.org/vRQx1O8A # block/non-block keywords

http://lua-users.org/wiki/SourceCodeFormatter

https://github.com/LuaDist/luapretty/blob/master/src/lua-formatter.lua

http://notebook.kulchenko.com/programming/lua-beautifier-in-55-lines-of-perl

# style guides
http://lua-users.org/wiki/LuaStyleGuide
http://sputnik.freewisdom.org/en/Coding_Standard

# testing framework
http://olivinelabs.com/busted/
# code optimizer
http://lua-users.org/wiki/SourceOptimizer

# Lua IDE
http://studio.zerobrane.com/

# AST-based formatter/linter
subtle comma (Kolesnikov)

Questions to be asked when enough tests will pass
-------------------------------------------------

#
# How to/If we need to interpret these escape sequences (2.1 – Lexical Conventions) 
#
    <double quoted String char> ~ <C escape sequence>
    <double quoted String char> ~ <escape sequence of decimal digits>

    <single quoted String char> ~ <C escape sequence>
    <single quoted String char> ~ <escape sequence of decimal digits>

    <C escape sequence> ~ '\a' # bell
    <C escape sequence> ~ '\b' # backspace
    <C escape sequence> ~ '\f' # form feed
    <C escape sequence> ~ '\n' # newline
    <C escape sequence> ~ '\r' # carriage return
    <C escape sequence> ~ '\t' # horizontal tab
    <C escape sequence> ~ '\v' # vertical tab
    <C escape sequence> ~ '\\' # backslash
		\"	double quote #"
		\'	single quote #'
		\[	left square bracket
		\]	right square bracket
   
    
# A character in a string can also be specified by its numerical value
# using the escape sequence \ddd, where ddd is a sequence of
# up to three decimal digits. (Note that if a numerical escape
# is to be followed by a digit, it must be expressed using
# exactly three digits.) Strings in Lua can contain any 8-bit value,
# including embedded zeros, which can be specified as '\0'.
    <escape sequence of decimal digits> ~ '\' [\d]
    <escape sequence of decimal digits> ~ '\' [\d] [\d]
    <escape sequence of decimal digits> ~ '\' [\d] [\d] [\d]

Links
=====

https://github.com/jddurand/MarpaX-Languages-C-AST/blob/master/lib/MarpaX/Languages/C/AST/Grammar/ISO_ANSI_C_2011.pm
https://github.com/jeffreykegler/Marpa--R2/blob/master/cpan/lib/Marpa/R2/meta/metag.bnf
