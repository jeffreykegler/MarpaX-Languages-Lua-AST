# lexer
	speedup match strings in a single regex and get token_names from hash
	
# ast traversal

Lua AST you can traverse

Lua filter -- extend/mangle Lua syntax

# check for ambiguity

# find a job for lua parser

help port lua 5.1 code to lua 5.2 -- What Lua 5.1 code breaks in Lua 5.2
http://www.luafaq.org/#T8.1

find 

Features not implemented in luainspect (but probably should be):

check commenting style, e.g. LuaDoc comment consistency.

static analysis enhancements:
check argument types in standard libraries when possible: e.g. local x = "foo"; math.sqrt(x)
support block folding
highlight poor style, such as pathological indenting and other LuaStyleGuide faults.
check packaging conventions in project folder, like .rockspec files in LuaRocks, README, COPYRIGHT, library naming conventions, etc.
improve performance more
improve syntax highlighting on code currently being typed that is not yet syntactically valid. For example, when typing something like math.sqrt(2), prior to typing the final (2) to make it a valid statement, an error displays and syntax highlighting is lacking.
provide access to more refactoring routines: fixing code intention, SourceOptimizer, localization (e.g. math.sqrt(2) --> local math_sqrt = math.sqrt ..... math_sqrt(2)), and others
dynamic analysis: incorporate more information by dynamic analysis (e.g. ProfilingLuaCode and coverage [LuaCov]) including type/value/definition information not obtainable by static analysis fixes in Metalua

http://lua-users.org/wiki/LuaInspect

# More parser tests:
http://lua-users.org/wiki/LuaGrammar

# lua formatters/ast emitters

http://metalua.luaforge.net/

http://lua-users.org/wiki/LuaInspect

https://github.com/batrick/lunadry # most recent

http://codepad.org/vRQx1O8A # block/non-block keywords

http://lua-users.org/wiki/SourceCodeFormatter

https://github.com/LuaDist/luapretty/blob/master/src/lua-formatter.lua

http://notebook.kulchenko.com/programming/lua-beautifier-in-55-lines-of-perl

# style guides
http://lua-users.org/wiki/LuaStyleGuide
http://sputnik.freewisdom.org/en/Coding_Standard

# testing framework
http://olivinelabs.com/busted/
# code optimizer
http://lua-users.org/wiki/SourceOptimizer

# Lua IDE
http://studio.zerobrane.com/

# AST-based formatter/linter
subtle comma (Kolesnikov)

Questions to be asked when enough tests will pass
-------------------------------------------------

#
# How to/If we need to interpret these escape sequences (2.1 – Lexical Conventions) 
#
    <double quoted String char> ~ <C escape sequence>
    <double quoted String char> ~ <escape sequence of decimal digits>

    <single quoted String char> ~ <C escape sequence>
    <single quoted String char> ~ <escape sequence of decimal digits>

    <C escape sequence> ~ '\a' # bell
    <C escape sequence> ~ '\b' # backspace
    <C escape sequence> ~ '\f' # form feed
    <C escape sequence> ~ '\n' # newline
    <C escape sequence> ~ '\r' # carriage return
    <C escape sequence> ~ '\t' # horizontal tab
    <C escape sequence> ~ '\v' # vertical tab
    <C escape sequence> ~ '\\' # backslash
		\"	double quote #"
		\'	single quote #'
		\[	left square bracket
		\]	right square bracket
   
    
Links
-----

https://github.com/jddurand/MarpaX-Languages-C-AST/blob/master/lib/MarpaX/Languages/C/AST/Grammar/ISO_ANSI_C_2011.pm
https://github.com/jeffreykegler/Marpa--R2/blob/master/cpan/lib/Marpa/R2/meta/metag.bnf
